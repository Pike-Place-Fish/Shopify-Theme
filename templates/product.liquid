<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

{% comment %}
  ### NOTE KLT062716: Beeketing Boost Sales Product Implementation
  - http://bit.ly/1TB8dYB
  - https://youtu.be/nxc_-VXavt8?t=19s
  ### NOTE KLT062716: Beeketing Boost Sales Product Price Replacements
  - https://youtu.be/nxc_-VXavt8?t=5m48s
  - Variables replacement:
    - product.price = scn_product_min
    - product.price_min = scn_product_min
    - product.price_varies = scn_price_varies
    - {{ product | json }} = scnProduct({{ product | json }})
    - product.selected_or_first_available_variant = scn_first_product_variant
{% endcomment %}
<!-- SCN code start -->
{% include 'scn-product' %}
<!-- SCN code end -->

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = scn_first_product_variant %}

  {% comment %}
    Assign product variable for unit price / label snippet
  {% endcomment %}
  {% assign product_object = product %}

  {% include 'breadcrumb' %}

  <div class="grid--rev product-single">

    <div class="grid__item large--one-half medium--two-thirds">

      <h1 itemprop="name" class="h2">{{ product.title }}</h1>

      {% comment %}
        ### NOTE KLT061516: Added a "unit-price" containing div, for formatting
      {% endcomment %}
      <div class="unit-price">

        {% if product.metafields.priceUnit.pricePerPound %}
          <h2>
            {% assign unit_price = product.metafields.priceUnit.pricePerPound | times: 100 | money %}
            {% include 'product-unit-price-label' with product_object, unit_price %}
          </h2>
        {% else %}
          {% comment %}
            ### NOTE KLT072516: Added conditional price assignment for products with no variants
            ### NOTE KLT072516: Modified id="ProductPrice" to negate assets/timber.js.liquid treatment
          {% endcomment %}
          {% if current_variant.price %}
            {% assign price = current_variant.price %}
          {% elsif scn_product_min %}
            {% assign price = scn_product_min %}
          {% else %}
            {% assign price = product.price %}
          {% endif %}
          <span id="ProductUnitPrice" class="h2" itemprop="price" content="{{ price | divided_by: 100 }}">
            {% assign unit_price = price | money %}
            {% include 'product-unit-price-label' with product_object, unit_price %}
          </span>

          {% if product.compare_at_price_max > scn_product_min %}
            <span class="visually-hidden price-label">{{ 'products.general.sale_price' | t }}</span>
            <p id="ComparePrice">
              {% assign unit_price = current_variant.compare_at_price | money %}
              {{ 'products.product.compare_at' | t }}
              {% include 'product-unit-price-label' with product_object, unit_price %}
            </p>
          {% endif %}

        {% endif %}

      </div>

      {% comment %}
        ### NOTE KLT061516: Moved product description to top of view
      {% endcomment %}
      <div class="product-description rte" itemprop="description">
        {{ product.description }}
      </div>

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

        {% comment %}
          ID addToCartForm is a selector for the ajax cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-horizontal">

          {% comment %}
            ### NOTE KLT061516: Added a "option-container" containing div, for formatting
          {% endcomment %}
          <div class="option-container">
            <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
            <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">
          </div>

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
          {% endcomment %}
          <select name="id" id="productSelect" class="product-single__variants">
            {% for variant in product.variants %}
              {% if variant.available %}

                {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {% endcomment %}
                <option {% if variant == scn_first_product_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                </option>
              {% endif %}
            {% endfor %}
          </select>

          {% comment %}
            Custom InfiniteOptions implementation
          {% endcomment %}
          <div id="infiniteoptions-container" class="product-custom-options"></div>

          {% comment %}
            ### NOTE KLT071116: Added a hidden product type input, for pass-through to Bespoke
          {% endcomment %}
          {% assign isPerishable = 1 %}
          {% if product.type contains 'Not Fish' %}
            {% assign isPerishable = 0 %}
          {% endif %}
          <input type="hidden" name="properties[_isPerishable]" value="{{ isPerishable }}" />

          {% comment %}
            ### NOTE KLT072616: Added a _includesShipping property to be able to instruct
            Bespoke to negate shipping costs.
          {% endcomment %}
          {% assign includesShipping = 0 %}
          {% if product.tags contains '_includesShipping' %}
            {% assign includesShipping = 1 %}
          {% endif %}
          <input type="hidden" name="properties[_includesShipping]" value="{{ includesShipping }}" />

          {% comment %}
            ### NOTE KLT080216: Added packing option properties to be able to instruct Bespoke
            with regard to distributing line items in the order for packaging.
          {% endcomment %}
          {% assign poundsPerPackage = product.metafields.packingOption.poundsPerPackage %}
          {% assign shipAlone = product.metafields.packingOption.shipAlone %}
          {% assign useLargeContainer = product.metafields.packingOption.useLargeContainer %}
          {% if poundsPerPackage %}
            <input type="hidden" name="properties[_poundsPerPackage]" value="{{ poundsPerPackage }}" />
          {% endif %}
          {% if shipAlone %}
            <input type="hidden" name="properties[_shipAlone]" value="{{ shipAlone }}" />
          {% endif %}
          {% if useLargeContainer %}
            <input type="hidden" name="properties[_useLargeContainer]" value="{{ useLargeContainer }}" />
          {% endif %}

          {% comment %}
            ### NOTE KLT061516: Added a "option-container" containing div and button label, for formatting
          {% endcomment %}
          <div class="option-container">
            <label for="add" class="visually-hidden">Add</label>
            <span>

              {% if product.metafields.priceUnit.pricePerPound and product.tags contains 'Whole Fish' %}
                <!-- Total Price -->
                <span class="full-price h6">
                  {{ settings.label_whole_fish_total }}
                  <span id="ProductPrice" class="h6" itemprop="price" content="{{ current_variant.price | divided_by: 100 }}">
                    {{ current_variant.price | money }}
                 </span>
                </span>
                <!-- /Total Price -->
              {% endif %}

              <button type="submit" name="add" id="AddToCart" class="btn">
                <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
              </button>
            </span>
          </div>

        </form>

      </div>

      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.

        ### NOTE KLT072516: Commented out prev/next product paging

        {% if collection %}
          {% if collection.previous_product or collection.next_product %}
            <p>
              {% if collection.previous_product %}
                <span class="left">
                  {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
                </span>
              {% endif %}
              {% if collection.next_product %}
                <span class="right">
                  {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
                </span>
              {% endif %}
            </p>
          {% endif %}
        {% endif %}

      {% endcomment %}

    </div>

    <div class="grid__item large--one-half medium--one-third">
      <div class="product-single__photos text-center" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
      </div>

      {% comment %}
        Create thumbnails if we have more than one product image
      {% endcomment %}
      {% if product.images.size > 1 %}
        <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">

          {% for image in product.images %}
            <li class="grid__item one-quarter">
              <a href="{{ image.src | img_url: 'large' }}" class="product-single__thumbnail">
                <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
              </a>
            </li>
          {% endfor %}

        </ul>
      {% endif %}

      {% comment %}
        ### NOTE KLT061616: Relatable Implementation
        - https://relatable.heliumdev.com/docs
      {% endcomment %}
      <div data-relatable="product.articles" data-relatable-id="{{product.id}}" class="related-recipes">
        {% raw %}
          {{#articles.length}}
            <h6>Recipes:</h6>
            <ul>
          {{/articles.length}}
          {{#articles}}
              <li><a href="/blogs/recipes/{{id}}">{{title}}</a></li>
          {{/articles}}
          {{#articles.length}}
            </ul>
          {{/articles.length}}
        {% endraw %}
      </div>

    </div>

  </div>

</div>

{% comment %}
  ### NOTE KLT071416: Inline content for cutting instructions modal
{% endcomment %}
<div style="display:none;">
  <div id="CuttingInstructionsModal" class="instructions modal">
    <article>
      <header>
        <h2 class="title">Know Your Cutting Options</h2>
      </header>
      <section>
        <table cellpadding="0" cellspacing="0" class="table cutting-instructions">
          <tbody>
            <tr>
              <td><img src="{{ 'Filet.jpg' | file_img_url: 'large' }}" alt="Filet" /></td>
              <td><img src="{{ 'Steak.jpg' | file_img_url: 'large' }}" alt="Steak" /></td>
              <td><img src="{{ 'HalfAndHalf.jpg' | file_img_url: 'large' }}" alt="Half and Half" /></td>
              <td><img src="{{ 'WholeFish.jpg' | file_img_url: 'large' }}" alt="Whole Fish" /></td>
            </tr>
            <tr>
              <td class="label">Filet</td>
              <td class="label">Steak</td>
              <td class="label">Half &amp; Half</td>
              <td class="label">Whole Fish</td>
            </tr>
          </tbody>
        </table>
      </section>
      <footer>
        <p><strong>Please note</strong>: A 15 pound fish does not yield 15 pounds of meat. Some weight will be lost in the cutting process.</p>
      </footer>
    </article>
  </div>
</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies

  ### NOTE KLT071416: Added modal functionality to jQuery ready function

{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: scnProduct({{ product | json }}),
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}


    /**
     * Intercepts click on Boost Sales "CHECKOUT NOW" button, to direct the customer through the cart
     */
    $('body').on('click', '.scn-button-check', function (e) {
      e.preventDefault();
      e.stopPropagation();

      // Redirect to cart instead of checkout
      window.location.href      = '/cart';

      return false;

    });

    /**
     * Modal cutting instructions functionality: injection of info icon and modal/popup instantiation
     */
    var modalWidth              = '50%';
    if ($(window).width() < 960) {
      modalWidth                = '75%';
    }
    else if ($(window).width() < 480) {
      modalWidth                = '95%';
    }

    // Make sure the cutting instructions selection exists before applying modal link
    var hasCuttingInstructions = setInterval(function() {
      var cuttingInstructions   = '#infiniteoptions-container div.spb-select select[name="properties[cuttingInstructions]"]';
      if ($(cuttingInstructions).length) {
        $(cuttingInstructions).after(function() {
          return '<a class="info-link" href="#CuttingInstructionsModal" title="Cutting Instructions Information">i</a>';
        });
        clearInterval(hasCuttingInstructions);
      }
    }, 100);
    // Instantiate the cutting instructions popup once the info link exists
    var hasInfoLink = setInterval(function() {
      var infoLink              = '#infiniteoptions-container div.spb-select a.info-link';
      if ($(infoLink).length) {
        $(infoLink).colorbox({
          inline: true,
          opacity: 0.3,
          maxWidth: modalWidth,
          title: false
        });
        clearInterval(hasInfoLink);
      }
    }, 100);
    // Instantiate the cutting instructions popup for text links (in product description)
    $('a.instructions-link').colorbox({
      inline: true,
      opacity: 0.3,
      maxWidth: modalWidth,
      title: false
    });

  });

</script>