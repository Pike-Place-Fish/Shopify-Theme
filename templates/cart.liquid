<!-- /templates/cart.liquid -->
{% comment %}

  For info on test orders:
    - General http://docs.shopify.com/manual/your-store/orders/test-orders
    - Shopify Payments - http://docs.shopify.com/manual/more/shopify-payments/testing-shopify-payments

{% endcomment %}

{% if cart.item_count > 0 %}

  <h1 class="visually-hidden">{{ 'cart.general.title' | t }}</h1>
  <form id="CartForm" action="/cart" method="post" novalidate class="cart table-wrap">
    <table class="cart-table full table--responsive">
      <thead class="cart__row cart__header-labels">
        <th colspan="2" class="text-left">{{ 'cart.label.product' | t }}</th>
        <th class="text-right">{{ 'cart.label.price' | t }}</th>
        <th class="text-right">{{ 'cart.label.quantity' | t }}</th>
        <th class="text-right"><span id="bk-cart-subtotal-label">{{ 'cart.general.subtotal' | t }}</span></th>{% comment %}Was 'cart.label.total'{% endcomment %}
      </thead>
      <tbody>
        {% for item in cart.items %}
          <tr class="cart__row table__section">
            <td data-label="{{ 'customer.order.product' | t }}" class="thumbnail">

              <a href="{{ item.url | within: collections.all }}" class="cart__image">
                {% comment %}
                  More image size options at:
                    - http://docs.shopify.com/themes/filters/product-img-url
                {% endcomment %}
                <img src="{{ item | img_url: 'medium' }}" alt="{{ item.title | escape }}">
              </a>

            </td>
            <td class="details">

              <!-- Product Name (and vendor) -->
              <div class="title">
                <a href="{{ item.url }}" class="h4">
                  <span>{{ item.product.title }}</span>
                </a>

                {% if settings.cart_vendor_enable %}
                  <p class="vendor">{{ item.vendor }}</p>
                {% endif %}
              </div>
              <!-- /Product Name (and vendor) -->

              <!-- Product Specs (weight, instructions) -->
              <ul class="specifications">

                <!-- Variants -->
                {% unless item.variant.title contains 'Default' %}
                  <li class="variant">{{ item.variant.title }}</li>
                {% endunless %}
                <!-- /Variants -->

                <!-- Custom Properties -->
                {% comment %}
                  Optional, loop through custom product line items if available

                  For more info on line item properties, visit:
                    - http://docs.shopify.com/support/your-store/products/how-do-I-collect-additional-information-on-the-product-page-Like-for-a-monogram-engraving-or-customization

                  ### NOTE KLT061616: Merged recommended InfiniteOptions display with the below/pre-existing Timber implementation
                {% endcomment %}
                {% assign property_size = item.properties | size %}
                {% assign hidden_properties = '_shipping_restriction,_shipping_category,_delivery_date,_delivery_day,_poundsPerPackage,_shipAlone,_useLargeContainer,_isPerishable,_includesShipping' | split: ',' %}
                {% if property_size > 0 %}
                  {% for p in item.properties %}
                    {% unless (p.last == blank or hidden_properties contains p.first) %}

                      <li class="property">
                        {% comment %}
                          {% if p.first contains 'cuttingInstructions' %}
                            {{ 'cart.general.item_cutting_instructions' | t }}:
                          {% elsif p.first contains 'specialInstructions' %}
                            {{ 'cart.general.item_special_instructions' | t }}:
                          {% else %}
                            {{ p.first }}:
                          {% endif %}
                        {% endcomment %}

                        {% comment %}
                          Check if there was an uploaded file associated
                        {% endcomment %}
                        {% if p.last contains '/uploads/' %}
                          <a href="{{ p.last }}">{{ p.last | split: '/' | last }}</a>
                        {% else %}
                          <!-- {{ p.first }} - -->{{ p.last }}
                        {% endif %}

                      </li>
                    {% endunless %}
                  {% endfor %}
                {% endif %}

              </ul>
              <!-- /Product Specs (weight, instructions) -->

              <!-- Product Actions (delete) -->
              <div class="actions">
                <a href="/cart/change?line={{ forloop.index }}&amp;quantity=0" class="cart__remove">
                  <small>{{ 'cart.general.remove' | t }}</small>
                </a>
              </div>
              <!-- /Product Actions (delete) -->

            </td>
            <td data-label="{{ 'cart.label.price' | t }}" class="text-right price">
              <span class="h3 price">
                {{ item.price | money }}
              </span>
            </td>
            <td data-label="{{ 'cart.label.quantity' | t }}" class="text-right quantity">
              <input type="number" name="updates[]" id="updates_{{ item.id }}" value="{{ item.quantity }}" min="0">
            </td>
            <td data-label="{{ 'cart.general.subtotal' | t }}" class="text-right total">
              {% if item.original_line_price != item.line_price %}
                <span class="cart-item__original-price"><s>{{ item.original_line_price | money }}</s></span>
              {% endif %}
              <span class="h3 price">
                <span id="bk-cart-subtotal-label">{{ item.line_price | money }}</span>
              </span>
              {% for discount in item.discounts %}
                <span class="cart-item__discount">{{ discount.title }}</span>
              {% endfor %}
            </td>
          </tr>
        {% endfor %}

        <tr class="cart__row table__section">
          <td colspan="5" class="gift-settings">
            <div class="grid cart__row">
              {% if settings.cart_notes_enable %}
                <div class="grid__item one-half medium-down--two-thirds">
                  <div class="cart-notes gift-message hide">
                    <label for="CartSpecialInstructions"><!-- {{ 'cart.general.note' | t }} -->Gift message:</label>
                    <textarea name="attributes[giftMessage]" class="input-full" id="CartSpecialInstructions">{{ cart.note }}</textarea><!-- name was 'note' -->
                  </div>
                </div>
                <div class="grid__item one-half medium-down--one-third text-right">
                  <label for="IsGift" class="checkbox label-left">
                    Is this a gift?
                    <input type="checkbox" id="IsGift" name="attributes[isGift]" />
                  </label>
                </div>
              {% endif %}
            </div>
          </td>
        </tr>

        <tr class="cart__row table__section">
          <td colspan="5" class="summary">

            <div class="grid cart__row">

              <div class="grid__item medium--one-half medium--show medium-down--hide">

                <!-- Shipping Weight Note -->
                {% comment %}
                  ### NOTE KLT062216: Assign total cart weight to variable with unit prior to using in interpolation
                {% endcomment %}
                {% assign cart_weight = cart.total_weight | weight_with_unit %}
                <h3 class="order-weight-heading">{{ 'cart.general.order_weight' | t: total_weight: cart_weight }}</h3>
                <p class="order-weight-disclaimer">
                  <span class="cost-disclaimer">{{ 'cart.general.shipping_disclaimer' | t }}</span>
                  <span class="packaging-disclaimer"><em>(Not including box and ice.)</em></span>
                </p>
                <!-- /Shipping Weight Note -->

              </div>
              <div class="grid__item text-right{% if settings.cart_notes_enable %} small--one-half{% endif %}">
                <!-- Subtotal and Shipping/Tax Note -->
                <p>
                  <span class="cart__subtotal-title"><span id="bk-cart-subtotal-label">{{ 'cart.general.subtotal' | t }}</span>: </span>
                  <span class="h4 cart__subtotal"><span id="bk-cart-subtotal-price">{{ cart.total_price | money }}</span></span>
                </p>
                {% if cart.total_discounts > 0 %}
                  {% assign savings = cart.total_discounts | money %}
                  <p><span class="cart-subtotal__savings"><em>{{ 'cart.general.savings_html' | t: price: savings }}</em></span></p>
                {% endif %}
                <p class="shipping-note"><em>{{ 'cart.general.shipping_at_checkout' | t }}</em></p>
                <!-- /Subtotal and Shipping/Tax Note -->
              </div>
              <div class="grid__item medium--hide medium-down--show medium-down--text-right">

                <!-- Shipping Weight Note -->
                {% comment %}
                  ### NOTE KLT062216: Assign total cart weight to variable with unit prior to using in interpolation
                {% endcomment %}
                {% assign cart_weight = cart.total_weight | weight_with_unit %}
                <h3 class="order-weight-heading">{{ 'cart.general.order_weight' | t: total_weight: cart_weight }}</h3>
                <p class="order-weight-disclaimer">
                  <span class="cost-disclaimer">{{ 'cart.general.shipping_disclaimer' | t }}</span>
                  <span class="packaging-disclaimer"><em>(Not including box and ice.)</em></span>
                </p>
                <!-- /Shipping Weight Note -->

              </div>

              <div class="grid__item spacer one-half medium-down--hide">&nbsp;</div>
              <div class="grid__item medium--text-right medium--one-half medium-down--text-right">
                <!-- Delivery Date Selection -->
                {% comment %}
                  ### NOTE KLT062016: jQuery UI implementation for shipping date picker - Autotag Delivery Date app should, in
                                      theory, automatically hook into the date picker once activated.
                {% endcomment %}
                <div class="delivery-date">
                  <label for="date">{{ settings.heading_delivery_date }}</label>
                  <input type="text" id="delivery_date" name="attributes[date]" value="{{ cart.attributes.date }}" size="10" required />
                  <input type="hidden" id="delivery_day" name="attributes[shipDay]" />
                  <p class="shipping-note"><em>{{ 'cart.general.shipping_date_note' | t }}<br/>{{ 'cart.general.shipping_perishable_note' | t }}</em></p>
                  <div class="day-warning"><small>{{ settings.warning_shipping_surcharge }}</small></div>
                  <div class="delay-warning"><small>{{ settings.warning_shipping_delay }}</small></div>
                </div>
                <!-- /Delivery Date Selection -->
              </div>

              <div class="grid__item medium--one-half medium-down--text-right">
                {% comment %}
                  ### NOTE KLT090116: Added checkout button for display just on mobile
                {% endcomment %}
                <div class="medium--hide medium-down--text-right btn-container">
                  <!-- Checkout Button -->
                  <input type="submit" id="CheckoutButtonMobile" name="checkout" class="btn" value="{{ 'cart.general.checkout' | t }}" />
                </div>
                <!-- Keep Shopping Button -->
                {% comment %}
                  ### TODO KLT061516: There is currently no resource corresponding to this label.
                {% endcomment %}
                <a href="/collections/all" class="btn--secondary">Keep Shopping</a>
              </div>
              <div class="grid__item medium--text-right medium--one-half medium-down--text-right">
                <!-- Update Cart Button -->
                <input type="submit" name="update" class="btn--secondary update-cart" value="{{ 'cart.general.update' | t }}">
                <div class="medium-down--hide btn-container">
                  <!-- Checkout Button -->
                  <input type="submit" id="CheckoutButton" name="checkout" class="btn" value="{{ 'cart.general.checkout' | t }}">
                </div>
              </div>

            </div>

          </td>
        </tr>

      </tbody>
    </table>
  </form>
{% else %}
  {% comment %}
    The cart is empty
  {% endcomment %}
  <h2>{{ 'cart.general.title' | t }}</h2>
  <p>{{ 'cart.general.empty' | t }}</p>
  <p>{{ 'cart.general.continue_browsing_html' | t }}</p>
{% endif %}


<script>
  /**
   * Instantiate CartJS
   */
  CartJS.init({{ cart | json }}, {
  //"dataAPI": false,
    "requestBodyClass": "loading"
  });

  $(function() {

/*
$('#delivery_date').val('');
$('#delivery_day').val('');
*/

    /**
     * Establish date-related variables
     */
    var
      today                     = new Date(),
      shipOnSaturday            = false,
      shipOnSaturdayStart       = new Date('11/01/2017'),
      shipOnSaturdayEnd         = new Date('02/28/2018'),
      preHolidays               = ['2017-05-28','2017-07-03','2017-09-03','2017-11-22','2017-12-24','2017-12-31'],
      holidays                  = ['2017-05-29','2017-07-04','2017-09-04','2017-11-23','2017-12-25','2018-01-01'],
      surchargeWarning          = '{{ settings.warning_shipping_surcharge }}',
      delayWarning              = '{{ settings.warning_shipping_delay }}',
      selectedShipDay           = $('#delivery_day').val(),
      formattedShipDate         = jQuery.datepicker.formatDate('yy-mm-dd', new Date($('#delivery_date').val()));

    // Reset day value if not populated on load (but date is populated)
    if (!selectedShipDay.length && $('#delivery_date').val().length > 0) {
      selectedShipDay           = jQuery.datepicker.formatDate('DD', new Date($('#delivery_date').val()));
      $('#delivery_day').val(selectedShipDay);
    }

    // Determine ship on Saturday availability
    if (shipOnSaturdayStart <= today && today <= shipOnSaturdayEnd) {
      shipOnSaturday            = true;
    }

    /**
     * On load, displays the ship day warning(s) if the calendar value meets the criteria
     */
    if (selectedShipDay.toLowerCase().indexOf('friday') > -1 || selectedShipDay.toLowerCase().indexOf('saturday') > -1) {
      $('.delivery-date div.day-warning').show();
    }
    else {
      $('.delivery-date div.day-warning').hide();
    }
    // Show delivery delay warning if Saturday or pre-holiday are selected
    if (selectedShipDay.toLowerCase().indexOf('saturday') > -1 || preHolidays.indexOf(formattedShipDate) > -1) {
      $('.delivery-date div.delay-warning').show();
    }
    else {
      $('.delivery-date div.delay-warning').hide();
    }

    /**
     * Preset line item date properties on load, in case they have been wiped out or not updated
     */
    var
      itemQuantity                      = CartJS.cart.items[0].quantity,
      itemProperties                    = CartJS.cart.items[0].properties;

    itemProperties._delivery_date       = $('#delivery_date').val();
    itemProperties._delivery_day        = $('#delivery_day').val();

    CartJS.updateItem(1, itemQuantity, itemProperties);

    /**
     * Sets the cart weight disclaimer--either the note about cost for up to 12 lbs., or a note about the packaging weight--and
     * the visibility thereof, depending on the total weight (in grams).
     */
    if ({{ cart.total_weight }} > 5443) {
      $('span.cost-disclaimer').hide();
      //$('span.packaging-disclaimer').css('display', 'block');
    }

    /**
     * Delivery date selection functionality - datepicker and business rules for Friday and weekend shipping
     * ### NOTE 071816: Added holiday blackouts based on
     * https://www.ups.com/content/us/en/resources/ship/imp_exp/operation.html
     */
    // Double-check and correct if selected delivery date is in the past
    if ($('#delivery_date').val().length) {
      var
        currentDate             = Date.parse(new Date()),
        selectedDate            = Date.parse($('#delivery_date').val()),
        newSelectedDate         = new Date(),
        newSelectedMonth,
        newSelectedDay,
        newSelectedYear;

      // Reset the selected delivery date if currently selected date is in the past
      if (selectedDate <= currentDate) {

        // Clear the selected date
        $('#delivery_date').val('');

        /*
        // Calculate new delivery date (skip to Tuesday if current day is Friday, otherwise set
        // to tomorrow)
        if (newSelectedDate.getDay() === 5) {
          newSelectedDate       = newSelectedDate.setDate(newSelectedDate.getDate() + 4);
        }
        else {
          newSelectedDate       = newSelectedDate.setDate(newSelectedDate.getDate() + 1);
        }
        newSelectedDate         = new Date(newSelectedDate);

        // Format new selected delivery date value
        newSelectedMonth        = (newSelectedDate.getMonth() + 1);
        if (newSelectedMonth < 10) {
          newSelectedMonth      = '0' + newSelectedMonth;
        }
        newSelectedDay          = newSelectedDate.getDate();
        if (newSelectedDay < 10) {
          newSelectedDay        = '0' + newSelectedDay;
        }
        newSelectedYear         = newSelectedDate.getFullYear();

        // Set new delivery date value
        $('#delivery_date').val(newSelectedMonth + '/' + newSelectedDay + '/' + newSelectedYear);
        */

      }

    }
    // Instantiate date picker
    var
      currentDate               = new Date(),
      cutoff                    = new Date(),
      minDateSelection          = 0;

    cutoff.setHours(16);
    cutoff.setMinutes(30);
    if (currentDate > cutoff) {
      minDateSelection          = '+1d';
    }

    /*
    if ($('#delivery_date').val().length < 1) {
      $('#delivery_date').val(jQuery.datepicker.formatDate('mm/dd/yy', currentDate));
    }
    */

    jQuery('#delivery_date').datepicker({
      minDate                   : minDateSelection,
      maxDate                   : '+6m',
      defaultDate               : 0,
      dateFormat                : 'mm/dd/yy',
      altField                  : '#delivery_day',
      altFormat                 : 'DD',
      beforeShowDay: function(date) {
        var
          today                 = new Date(),
          dayOfWeek             = date.getDay(),
          dateString            = jQuery.datepicker.formatDate('yy-mm-dd', date),
          shipOnSaturday        = false,
          shipOnSaturdayStart   = new Date('11/01/2016'),
          shipOnSaturdayEnd     = new Date('02/28/2017');

        // Determine ship on Saturday availability
        if (shipOnSaturdayStart <= date && date <= shipOnSaturdayEnd) {
          shipOnSaturday        = true;
        }

        // Provide warning regarding surcharge, if Friday shipping is selected
        if (dayOfWeek == 5) {
          return [true, 'day-warning', surchargeWarning];
        }

        // Provide handling for Saturday shipping
        else if (dayOfWeek == 6) {
          if (shipOnSaturday) {
            return [true, 'day-warning', surchargeWarning + ' ' + delayWarning];
          }
          else {
            return false;
          }
        }

        // Provide handling for pre-holiday shipping
        else if (preHolidays.indexOf(dateString) > -1) {
          if (dayOfWeek != 0) {
            return [true, 'day-warning', delayWarning];
          }
          else {
            return false;
          }
        }

        else {
          return [(dayOfWeek != 0 && holidays.indexOf(dateString) == -1)];
        }

      },
      beforeShow: function(input, inst) {
        // Supress keyboard for datepicker on mobile
        $(input).attr('readonly','readonly').blur();
      }
    });
    // Update cart item properties based on selected ship date
    $('#delivery_date').change(function() {
      var
        selectedDate            = $(this).val(),
        formattedDate           = jQuery.datepicker.formatDate('yy-mm-dd', new Date(selectedDate)),
        selectedDay             = jQuery.datepicker.formatDate('DD', new Date(selectedDate)); //$('#delivery_day').val();

      $('#delivery_day').val(selectedDay);

      console.log($('#delivery_date').val());

      // Show $20 surcharge warning if Friday, Saturday, or pre-holiday are selected
      if (selectedDay.toLowerCase().indexOf('friday') > -1 || selectedDay.toLowerCase().indexOf('saturday') > -1) {
        $('.delivery-date div.day-warning').show();
      }
      else {
        $('.delivery-date div.day-warning').hide();
      }
      // Show delivery delay warning if Saturday or pre-holiday are selected
      if (selectedDay.toLowerCase().indexOf('saturday') > -1 || preHolidays.indexOf(formattedDate) > -1) {
        $('.delivery-date div.delay-warning').show();
      }
      else {
        $('.delivery-date div.delay-warning').hide();
      }

      // Reset _delivery_date and _delivery_day on all items
      for (i=0; i<CartJS.cart.items.length; i++) {
        var
          itemQuantity                  = CartJS.cart.items[i].quantity,
          itemProperties                = CartJS.cart.items[i].properties,
          itemIndex                     = (i+1);

        itemProperties._delivery_date   = undefined;
        itemProperties._delivery_day    = undefined;

        CartJS.updateItem(itemIndex, itemQuantity, itemProperties);
      }
      // Set first cart item's properties to selected ship date
      var
        firstItemQuantity               = CartJS.cart.items[0].quantity,
        firstItemProperties             = CartJS.cart.items[0].properties;

      firstItemProperties._delivery_date= $('#delivery_date').val();
      firstItemProperties._delivery_day = $('#delivery_day').val();

      CartJS.updateItem(1, firstItemQuantity, firstItemProperties);

      //console.log('itemProperties: ');
      //console.log(itemProperties);

      if ($(this).val().length > 0) {
        // Remove validation treatments if value is available
        $('label[for="date"]').css('color', 'rgb(51, 51, 51)');
        $('#delivery_date').css('border-color', 'rgb(229, 229, 229');
      }

      // Reset keyboard suppression
      $(this).removeAttr('readonly');

      //$('input[name="update"]').click();

    });
    // Hide the datepicker when the delivery date input loses focus
    $('body').click(function(e) {
      var keepOpen              = ((e.target.id === 'delivery_date') || $(e.target).hasClass('ui-icon-circle-triangle-e') || $(e.target).hasClass('ui-icon-circle-triangle-w'));
      if (!keepOpen) {
        jQuery('#delivery_date').datepicker('hide');
      }
      else {
        jQuery('#delivery_date').datepicker('show');
      }
    });
    // Track which button was clicked to trigger the submit
    $(':submit').click(function() {
      $('#CartForm').data('submit-button', this.name);
    });
    // Validate delivery date selection on submit
    $('#CartForm').submit(function(e) {

      var
        clickedButton           = $(this).data('submit-button'),
        errorColor              = 'rgb(208, 46, 46)',           // #d02e2e
        isDeliveryDateSelected  = ($('#delivery_date').val().length > 0);

      if (clickedButton === 'checkout') {
        // console.log('clickedButton tracked as checkout');

        // If delivery date is not selected, provide validation/error handling
        if (!isDeliveryDateSelected) {
          e.preventDefault();

          $('label[for="date"]').css('color', errorColor);
          $('#delivery_date').css('border-color', errorColor);
          // console.log('!isDeliveryDateSelected?');

          return false;
        }
        // If delivery date is available, continue the submission
        else {

          // console.log('isDeliveryDateSelected -- should continue');

          // Add selected delivery date and day to first line item
          var
            itemQuantity                = CartJS.cart.items[0].quantity,
            itemProperties              = CartJS.cart.items[0].properties;

          itemProperties._delivery_date = $('#delivery_date').val();
          itemProperties._delivery_day  = $('#delivery_day').val();

          //console.log('itemProperties: ');
          //console.log(itemProperties);

          CartJS.updateItem(1, itemQuantity, itemProperties);

          // Remove previously selected delivery date and day from other line items
          for (i=1; i<CartJS.cart.items.length; i++) {
            var
              itemLineNumber    = i+1,
              itemQuantity      = CartJS.cart.items[i].quantity,
              itemProperties    = CartJS.cart.items[i].properties;

            if (itemProperties.hasOwnProperty('delivery_date') && itemProperties.hasOwnProperty('delivery_day')) {
              delete itemProperties._delivery_date;
              delete itemProperties._delivery_day;
              CartJS.updateItem(itemLineNumber, itemQuantity, itemProperties);
            }
          }

          // Submit form
          $(this).off('submit').submit();

        }

      }
      else {
        // Submit update cart action
        $(this).off('submit').submit();
      }

    });

    /**
     * Manages the gift settings (whether the order is a gift, and the associated gift message)
     */
    $('label[for="IsGift"]').click(function(e) {
      if ($(this).find('input').is(':checked')) {
        $('div.gift-message').removeClass('hide');
      }
      else {
        $('div.gift-message').addClass('hide');
      }
    });

  });
</script>